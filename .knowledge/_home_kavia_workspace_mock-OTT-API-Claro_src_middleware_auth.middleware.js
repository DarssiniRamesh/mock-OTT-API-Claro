{"is_source_file": true, "format": "JavaScript", "description": "Middleware for authentication and authorization using JWT tokens in an Express application.", "external_files": ["../config", "../services/auth.service", "../utils/logger"], "external_methods": ["authService.verifyToken", "authService.isTokenBlacklisted"], "published": ["authenticate", "authorize"], "classes": [], "methods": [{"name": "_extractToken", "description": "Extracts JWT token from the request headers."}, {"name": "authenticate", "description": "Middleware to verify JWT token and attach user to request."}, {"name": "authorize", "description": "Middleware to authorize user roles based on the provided roles."}], "calls": ["authService.verifyToken", "authService.isTokenBlacklisted", "logger.error"], "search-terms": ["JWT", "Authentication", "Authorization"], "state": 2, "file_id": 20, "knowledge_revision": 42, "git_revision": "", "ctags": [{"_type": "tag", "name": "_extractToken", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/middleware/auth.middleware.js", "pattern": "/^const _extractToken = (req) => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "authService", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/middleware/auth.middleware.js", "pattern": "/^const authService = require('..\\/services\\/auth.service');$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "authenticate", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/middleware/auth.middleware.js", "pattern": "/^  authenticate,$/", "language": "JavaScript", "kind": "field", "scope": "module.exports", "scopeKind": "class"}, {"_type": "tag", "name": "authenticate", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/middleware/auth.middleware.js", "pattern": "/^const authenticate = async (req, res, next) => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "authorize", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/middleware/auth.middleware.js", "pattern": "/^const authorize = (roles = []) => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "config", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/middleware/auth.middleware.js", "pattern": "/^const config = require('..\\/config');$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "decoded", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/middleware/auth.middleware.js", "pattern": "/^      const decoded = authService.verifyToken(token);$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "hasRole", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/middleware/auth.middleware.js", "pattern": "/^      const hasRole = req.user.roles.some(role => roles.includes(role));$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "isBlacklisted", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/middleware/auth.middleware.js", "pattern": "/^      const isBlacklisted = await authService.isTokenBlacklisted(token);$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "jwt", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/middleware/auth.middleware.js", "pattern": "/^const jwt = require('jsonwebtoken');$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "logger", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/middleware/auth.middleware.js", "pattern": "/^const logger = require('..\\/utils\\/logger');$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "token", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/middleware/auth.middleware.js", "pattern": "/^    const token = _extractToken(req);$/", "language": "JavaScript", "kind": "constant"}], "filename": "/home/kavia/workspace/mock-OTT-API-Claro/src/middleware/auth.middleware.js", "hash": "ab5794a05002e002b3dc7967c46d4bfa", "format-version": 4, "code-base-name": "default", "fields": [{"name": "authenticate,", "scope": "module.exports", "scopeKind": "class", "description": "unavailable"}], "revision_history": [{"42": ""}]}