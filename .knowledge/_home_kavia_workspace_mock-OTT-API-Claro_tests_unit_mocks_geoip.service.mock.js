{"is_source_file": true, "format": "JavaScript", "description": "A mock implementation of the GeoIP service for testing purposes, providing methods to retrieve location, country, region, city, and coordinates for IP addresses, as well as manage a cache.", "external_files": ["../../../src/utils/logger", "../../../src/utils/geoip.utils"], "external_methods": ["logger.warn", "logger.info", "logger.error", "logger.debug", "isValidIpAddress", "normalizeIpAddress"], "published": ["createMockGeoIPService"], "classes": [], "methods": [{"name": "createMockGeoIPService", "description": "Creates and returns a fresh instance of the mock GeoIP service."}, {"name": "initialize", "description": "Initializes the MaxMind GeoIP2 database."}, {"name": "cleanupCache", "description": "Cleans up old entries from the cache."}, {"name": "getLocationByIp", "description": "Gets location information for a given IP address."}, {"name": "getCountryByIp", "description": "Gets country information for a given IP address."}, {"name": "getRegionByIp", "description": "Gets region information for a given IP address."}, {"name": "getCityByIp", "description": "Gets city information for a given IP address."}, {"name": "getCoordinatesByIp", "description": "Gets coordinates for a given IP address."}, {"name": "updateDatabase", "description": "Updates the MaxMind GeoIP2 database using a license key."}, {"name": "clearCache", "description": "Clears the IP address cache."}, {"name": "getCacheStats", "description": "Gets statistics about the cache."}, {"name": "_getInternalState", "description": "Exposes internal state for testing."}, {"name": "_setInternalState", "description": "Sets internal state for testing."}], "calls": ["logger.warn", "logger.info", "logger.error", "logger.debug", "isValidIpAddress", "normalizeIpAddress", "reader.get"], "search-terms": ["mock GeoIP service", "IP address location", "geoip.utils"], "state": 2, "file_id": 45, "knowledge_revision": 149, "git_revision": "", "ctags": [{"_type": "tag", "name": "CACHE_MAX_SIZE", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^  const CACHE_MAX_SIZE = 1000; \\/\\/ Maximum number of entries in the cache$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "CACHE_TTL", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^  const CACHE_TTL = 3600000; \\/\\/ 1 hour in milliseconds$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "_getInternalState", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^  const _getInternalState = () => ({$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "_setInternalState", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^  const _setInternalState = (state) => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "accuracy_radius", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^          accuracy_radius: result.location.accuracy_radius,$/", "language": "JavaScript", "kind": "property", "scope": "locationData.location", "scopeKind": "class"}, {"_type": "tag", "name": "cache", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^  const cache = new Map();$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "cachedResult", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^        const cachedResult = cache.get(normalizedIp);$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "city", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^        city: result.city ? {$/", "language": "JavaScript", "kind": "class", "scope": "locationData", "scopeKind": "class"}, {"_type": "tag", "name": "cleanupCache", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^  const cleanupCache = () => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "clearCache", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^  const clearCache = () => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "code", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^          code: result.continent.code,$/", "language": "JavaScript", "kind": "property", "scope": "locationData.continent", "scopeKind": "class"}, {"_type": "tag", "name": "code", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^          code: result.country.iso_code,$/", "language": "JavaScript", "kind": "property", "scope": "locationData.country", "scopeKind": "class"}, {"_type": "tag", "name": "code", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^          code: result.postal.code,$/", "language": "JavaScript", "kind": "property", "scope": "locationData.postal", "scopeKind": "class"}, {"_type": "tag", "name": "code", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^          code: result.subdivisions[0].iso_code,$/", "language": "JavaScript", "kind": "property", "scope": "locationData.region", "scopeKind": "class"}, {"_type": "tag", "name": "continent", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^        continent: result.continent ? {$/", "language": "JavaScript", "kind": "class", "scope": "locationData", "scopeKind": "class"}, {"_type": "tag", "name": "country", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^        country: result.country ? {$/", "language": "JavaScript", "kind": "class", "scope": "locationData", "scopeKind": "class"}, {"_type": "tag", "name": "createMockGeoIPService", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^const createMockGeoIPService = () => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "createMockGeoIPService", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^module.exports = { createMockGeoIPService };/", "language": "JavaScript", "kind": "field", "scope": "module.exports", "scopeKind": "class"}, {"_type": "tag", "name": "deletedCount", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^    let deletedCount = 0;$/", "language": "JavaScript", "kind": "variable"}, {"_type": "tag", "name": "entriesToDelete", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^      const entriesToDelete = [...cache.entries()]$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "getCacheStats", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^  const getCacheStats = () => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "getCityByIp", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^  const getCityByIp = async (ip) => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "getCoordinatesByIp", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^  const getCoordinatesByIp = async (ip) => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "getCountryByIp", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^  const getCountryByIp = async (ip) => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "getLocationByIp", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^  const getLocationByIp = async (ip) => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "getRegionByIp", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^  const getRegionByIp = async (ip) => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "initialize", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^  const initialize = async () => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "initialized", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^        const initialized = await initialize();$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "initialized", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^      const initialized = await initialize();$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "ip", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^        ip: normalizedIp,$/", "language": "JavaScript", "kind": "property", "scope": "locationData", "scopeKind": "class"}, {"_type": "tag", "name": "latitude", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^          latitude: result.location.latitude,$/", "language": "JavaScript", "kind": "property", "scope": "locationData.location", "scopeKind": "class"}, {"_type": "tag", "name": "location", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^        location: result.location ? {$/", "language": "JavaScript", "kind": "class", "scope": "locationData", "scopeKind": "class"}, {"_type": "tag", "name": "location", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^    const location = await getLocationByIp(ip);$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "locationData", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^      const locationData = {$/", "language": "JavaScript", "kind": "class"}, {"_type": "tag", "name": "logger", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^const logger = require('..\\/..\\/..\\/src\\/utils\\/logger');$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "longitude", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^          longitude: result.location.longitude,$/", "language": "JavaScript", "kind": "property", "scope": "locationData.location", "scopeKind": "class"}, {"_type": "tag", "name": "name", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^          name: result.city.names ? result.city.names.en : null,$/", "language": "JavaScript", "kind": "property", "scope": "locationData.city", "scopeKind": "class"}, {"_type": "tag", "name": "name", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^          name: result.continent.names ? result.continent.names.en : null,$/", "language": "JavaScript", "kind": "property", "scope": "locationData.continent", "scopeKind": "class"}, {"_type": "tag", "name": "name", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^          name: result.country.names ? result.country.names.en : null,$/", "language": "JavaScript", "kind": "property", "scope": "locationData.country", "scopeKind": "class"}, {"_type": "tag", "name": "name", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^          name: result.subdivisions[0].names ? result.subdivisions[0].names.en : null,$/", "language": "JavaScript", "kind": "property", "scope": "locationData.region", "scopeKind": "class"}, {"_type": "tag", "name": "normalizedIp", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^      const normalizedIp = normalizeIpAddress(ip);$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "now", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^    const now = Date.now();$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "postal", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^        postal: result.postal ? {$/", "language": "JavaScript", "kind": "class", "scope": "locationData", "scopeKind": "class"}, {"_type": "tag", "name": "reader", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^  let reader = null;$/", "language": "JavaScript", "kind": "variable"}, {"_type": "tag", "name": "region", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^        region: result.subdivisions && result.subdivisions.length > 0 ? {$/", "language": "JavaScript", "kind": "class", "scope": "locationData", "scopeKind": "class"}, {"_type": "tag", "name": "result", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^      const result = reader.get(normalizedIp);$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "size", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^    const size = cache.size;$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "time_zone", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^          time_zone: result.location.time_zone,$/", "language": "JavaScript", "kind": "property", "scope": "locationData.location", "scopeKind": "class"}, {"_type": "tag", "name": "timestamp", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^        timestamp: new Date().toISOString(),$/", "language": "JavaScript", "kind": "property", "scope": "locationData", "scopeKind": "class"}, {"_type": "tag", "name": "updateDatabase", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "pattern": "/^  const updateDatabase = async (licenseKey, edition = 'GeoLite2-City') => {$/", "language": "JavaScript", "kind": "constant"}], "filename": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geoip.service.mock.js", "hash": "d0b6c0ceab0cd841c300da00a97f6134", "format-version": 4, "code-base-name": "default", "fields": [{"name": "accuracy_radius: result.location.accuracy_radius,", "scope": "locationData.location", "scopeKind": "class", "description": "unavailable"}, {"name": "code: result.continent.code,", "scope": "locationData.continent", "scopeKind": "class", "description": "unavailable"}, {"name": "code: result.country.iso_code,", "scope": "locationData.country", "scopeKind": "class", "description": "unavailable"}, {"name": "code: result.postal.code,", "scope": "locationData.postal", "scopeKind": "class", "description": "unavailable"}, {"name": "code: result.subdivisions[0].iso_code,", "scope": "locationData.region", "scopeKind": "class", "description": "unavailable"}, {"name": "module.exports = { createMockGeoIPService };/", "scope": "module.exports", "scopeKind": "class", "description": "unavailable"}, {"name": "let deletedCount = 0;", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "ip: normalizedIp,", "scope": "locationData", "scopeKind": "class", "description": "unavailable"}, {"name": "latitude: result.location.latitude,", "scope": "locationData.location", "scopeKind": "class", "description": "unavailable"}, {"name": "longitude: result.location.longitude,", "scope": "locationData.location", "scopeKind": "class", "description": "unavailable"}, {"name": "name: result.city.names ? result.city.names.en : null,", "scope": "locationData.city", "scopeKind": "class", "description": "unavailable"}, {"name": "name: result.continent.names ? result.continent.names.en : null,", "scope": "locationData.continent", "scopeKind": "class", "description": "unavailable"}, {"name": "name: result.country.names ? result.country.names.en : null,", "scope": "locationData.country", "scopeKind": "class", "description": "unavailable"}, {"name": "name: result.subdivisions[0].names ? result.subdivisions[0].names.en : null,", "scope": "locationData.region", "scopeKind": "class", "description": "unavailable"}, {"name": "let reader = null;", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "time_zone: result.location.time_zone,", "scope": "locationData.location", "scopeKind": "class", "description": "unavailable"}, {"name": "timestamp: new Date().toISOString(),", "scope": "locationData", "scopeKind": "class", "description": "unavailable"}], "revision_history": [{"149": ""}]}