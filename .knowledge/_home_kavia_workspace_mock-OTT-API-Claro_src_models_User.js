{"is_source_file": true, "format": "JavaScript", "description": "Defines a Mongoose schema for user accounts in a web application, including fields for authentication and authorization, as well as methods for password handling and account management.", "external_files": ["mongoose", "bcrypt"], "external_methods": ["mongoose.model", "bcrypt.genSalt", "bcrypt.hash", "bcrypt.compare"], "published": ["User"], "classes": [], "methods": [{"name": "comparePassword(candidatePassword)", "description": "Compares the given password with the hashed password stored in the database.", "scope": "UserSchema.methods", "scopeKind": "function"}, {"name": "isLocked()", "description": "Checks if the user account is currently locked.", "scope": "UserSchema.methods", "scopeKind": "function"}, {"name": "incrementLoginAttempts()", "description": "Increments the count of failed login attempts and locks the account if necessary.", "scope": "UserSchema.methods", "scopeKind": "function"}, {"name": "resetLoginAttempts()", "description": "Resets the count of login attempts and unlocks the user account.", "scope": "UserSchema.methods", "scopeKind": "function"}, {"name": "findByLogin(login)", "description": "A static method to find a user by their email or username.", "scope": "UserSchema.statics", "scopeKind": "function"}, {"name": "AnonymousFunction25b7eb9b0100(doc, ret)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "AnonymousFunction25b7eb9b0200(doc, ret)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "AnonymousFunction25b7eb9b0300()", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "AnonymousFunction25b7eb9b0400(next)", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["bcrypt.genSalt", "bcrypt.hash", "bcrypt.compare", "this.updateOne"], "search-terms": ["UserSchema", "User", "comparePassword", "isLocked"], "state": 2, "file_id": 17, "knowledge_revision": 39, "git_revision": "", "ctags": [{"_type": "tag", "name": "$inc", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/models/User.js", "pattern": "/^  const updates = { $inc: { loginAttempts: 1 } };$/", "language": "JavaScript", "kind": "class", "scope": "UserSchema.methods.incrementLoginAttempts.updates", "scopeKind": "class"}, {"_type": "tag", "name": "$set", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/models/User.js", "pattern": "/^    updates.$set = { lockUntil: Date.now() + LOCK_TIME };$/", "language": "JavaScript", "kind": "class", "scope": "updates", "scopeKind": "class"}, {"_type": "tag", "name": "AnonymousFunction25b7eb9b0100", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/models/User.js", "pattern": "/^    transform: function(doc, ret) {$/", "language": "JavaScript", "kind": "function", "signature": "(doc, ret)"}, {"_type": "tag", "name": "AnonymousFunction25b7eb9b0200", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/models/User.js", "pattern": "/^    transform: function(doc, ret) {$/", "language": "JavaScript", "kind": "function", "signature": "(doc, ret)"}, {"_type": "tag", "name": "AnonymousFunction25b7eb9b0300", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/models/User.js", "pattern": "/^UserSchema.virtual('fullName').get(function() {$/", "language": "JavaScript", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "AnonymousFunction25b7eb9b0400", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/models/User.js", "pattern": "/^UserSchema.pre('save', async function(next) {$/", "language": "JavaScript", "kind": "function", "signature": "(next)"}, {"_type": "tag", "name": "Schema", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/models/User.js", "pattern": "/^const Schema = mongoose.Schema;$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "User", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/models/User.js", "pattern": "/^const User = mongoose.model('User', UserSchema);$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "UserSchema", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/models/User.js", "pattern": "/^const UserSchema = new Schema({$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "bcrypt", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/models/User.js", "pattern": "/^const bcrypt = require('bcrypt');$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "comparePassword", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/models/User.js", "pattern": "/^UserSchema.methods.comparePassword = async function(candidatePassword) {$/", "language": "JavaScript", "kind": "function", "signature": "(candidatePassword)", "scope": "UserSchema.methods", "scopeKind": "function"}, {"_type": "tag", "name": "findByLogin", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/models/User.js", "pattern": "/^UserSchema.statics.findByLogin = function(login) {$/", "language": "JavaScript", "kind": "function", "signature": "(login)", "scope": "UserSchema.statics", "scopeKind": "function"}, {"_type": "tag", "name": "incrementLoginAttempts", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/models/User.js", "pattern": "/^UserSchema.methods.incrementLoginAttempts = async function() {$/", "language": "JavaScript", "kind": "function", "signature": "()", "scope": "UserSchema.methods", "scopeKind": "function"}, {"_type": "tag", "name": "isLocked", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/models/User.js", "pattern": "/^UserSchema.methods.isLocked = function() {$/", "language": "JavaScript", "kind": "function", "signature": "()", "scope": "UserSchema.methods", "scopeKind": "function"}, {"_type": "tag", "name": "lockUntil", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/models/User.js", "pattern": "/^    updates.$set = { lockUntil: Date.now() + LOCK_TIME };$/", "language": "JavaScript", "kind": "property", "scope": "updates.$set", "scopeKind": "class"}, {"_type": "tag", "name": "loginAttempts", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/models/User.js", "pattern": "/^  const updates = { $inc: { loginAttempts: 1 } };$/", "language": "JavaScript", "kind": "property", "scope": "UserSchema.methods.incrementLoginAttempts.updates.$inc", "scopeKind": "class"}, {"_type": "tag", "name": "mongoose", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/models/User.js", "pattern": "/^const mongoose = require('mongoose');$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "resetLoginAttempts", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/models/User.js", "pattern": "/^UserSchema.methods.resetLoginAttempts = function() {$/", "language": "JavaScript", "kind": "function", "signature": "()", "scope": "UserSchema.methods", "scopeKind": "function"}, {"_type": "tag", "name": "updates", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/models/User.js", "pattern": "/^  const updates = { $inc: { loginAttempts: 1 } };$/", "language": "JavaScript", "kind": "class", "scope": "UserSchema.methods.incrementLoginAttempts", "scopeKind": "class"}], "filename": "/home/kavia/workspace/mock-OTT-API-Claro/src/models/User.js", "hash": "1dc0d16ecaf511effd53b015000a73d2", "format-version": 4, "code-base-name": "default", "fields": [{"name": "updates.$set = { lockUntil: Date.now() + LOCK_TIME };", "scope": "updates.$set", "scopeKind": "class", "description": "unavailable"}, {"name": "const updates = { $inc: { loginAttempts: 1 } };", "scope": "UserSchema.methods.incrementLoginAttempts.updates.$inc", "scopeKind": "class", "description": "unavailable"}], "revision_history": [{"39": ""}]}