{"is_source_file": true, "format": "JavaScript", "description": "A mock implementation of a Geolocation service for testing purposes, utilizing a factory pattern and including various configuration methods.", "external_files": ["../../../src/utils/logger"], "external_methods": ["jest.fn"], "published": ["createMockGeolocationService"], "classes": [], "methods": [{"name": "getLocationFromIp", "description": "Fetches location information based on an IP address.", "parameters": [{"name": "ip", "type": "string", "description": "The IP address to look up"}], "returns": {"type": "Promise<Object|null>", "description": "Location information or null if not found."}}, {"name": "enhanceLocationData", "description": "Enhances basic location data with additional information from the database.", "parameters": [{"name": "location", "type": "Object", "description": "Basic location data from GeoIP"}], "returns": {"type": "Promise<Object>", "description": "Enhanced location data."}}, {"name": "getRegionConfigurations", "description": "Fetches region-specific configurations.", "parameters": [{"name": "regionCode", "type": "string", "description": "The region code"}, {"name": "configType", "type": "string", "description": "Optional configuration type filter"}], "returns": {"type": "Promise<Object|Array|null>", "description": "Region configurations or null if not found."}}, {"name": "getCountryConfigurations", "description": "Fetches country-specific configurations.", "parameters": [{"name": "countryCode", "type": "string", "description": "The country code"}, {"name": "configType", "type": "string", "description": "Optional configuration type filter"}], "returns": {"type": "Promise<Object|Array|null>", "description": "Country configurations or null if not found."}}, {"name": "getConfigurationsByLocation", "description": "Fetches configurations based on location information.", "parameters": [{"name": "location", "type": "Object", "description": "Location object with country and region information"}, {"name": "configType", "type": "string", "description": "Optional configuration type filter"}], "returns": {"type": "Promise<Object|Array|null>", "description": "Location-based configurations or null if not found."}}, {"name": "validateLocationOverride", "description": "Validates a location override object.", "parameters": [{"name": "override", "type": "Object", "description": "Location override object"}], "returns": {"type": "Object", "description": "Validation result with isValid flag and errors array."}}, {"name": "clearCache", "description": "Clears geolocation caches based on type.", "parameters": [{"name": "type", "type": "string", "description": "Cache type to clear ('location', 'config', or 'all')"}], "returns": {"type": "number", "description": "Number of cache entries cleared."}}], "calls": [], "search-terms": ["Mock Geolocation Service", "Geolocation service methods", "Mock implementation", "Factory pattern"], "state": 2, "file_id": 47, "knowledge_revision": 175, "git_revision": "", "ctags": [{"_type": "tag", "name": "CONFIG_CACHE_TTL", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^  const CONFIG_CACHE_TTL = options.configCacheTtl || 1800000; \\/\\/ 30 minutes$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "COUNTRY_CONFIG_CACHE_PREFIX", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^  const COUNTRY_CONFIG_CACHE_PREFIX = 'geolocation:config:country:';$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "Country", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^      Country: {$/", "language": "JavaScript", "kind": "class", "scope": "dependencies.models", "scopeKind": "class"}, {"_type": "tag", "name": "LOCATION_CACHE_PREFIX", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^  const LOCATION_CACHE_PREFIX = 'geolocation:location:';$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "LOCATION_CACHE_TTL", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^  const LOCATION_CACHE_TTL = options.locationCacheTtl || 3600000; \\/\\/ 1 hour$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "REGION_CONFIG_CACHE_PREFIX", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^  const REGION_CONFIG_CACHE_PREFIX = 'geolocation:config:region:';$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "Region", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^      Region: {$/", "language": "JavaScript", "kind": "class", "scope": "dependencies.models", "scopeKind": "class"}, {"_type": "tag", "name": "RegionConfig", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^      RegionConfig: {$/", "language": "JavaScript", "kind": "class", "scope": "dependencies.models", "scopeKind": "class"}, {"_type": "tag", "name": "cacheKey", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^      const cacheKey = `${LOCATION_CACHE_PREFIX}${normalizedIp}`;$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "cacheKey", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^      const cacheKey = configType$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "cacheService", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^    cacheService: {$/", "language": "JavaScript", "kind": "property", "scope": "dependencies", "scopeKind": "class"}, {"_type": "tag", "name": "cachedConfig", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^      const cachedConfig = dependencies.cacheService.get(cacheKey);$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "cachedLocation", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^      const cachedLocation = dependencies.cacheService.get(cacheKey);$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "clearCache", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^  const clearCache = (type = 'all') => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "clearedCount", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^    let clearedCount = 0;$/", "language": "JavaScript", "kind": "variable"}, {"_type": "tag", "name": "configs", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^      let configs;$/", "language": "JavaScript", "kind": "variable"}, {"_type": "tag", "name": "country", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^      const country = await dependencies.models.Country.findOne({ code: countryCode });$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "country", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^      const country = await dependencies.models.Country.findOne({ code: countryCode.toUpperCase(/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "countryCode", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^      const countryCode = location.country.code;$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "countryConfigs", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^        const countryConfigs = await getCountryConfigurations(location.country.code, configType)/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "createMockGeolocationService", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^const createMockGeolocationService = (options = {}) => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "createMockGeolocationService", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^module.exports = { createMockGeolocationService };/", "language": "JavaScript", "kind": "field", "scope": "module.exports", "scopeKind": "class"}, {"_type": "tag", "name": "debug", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^      debug: jest.fn(),$/", "language": "JavaScript", "kind": "property", "scope": "dependencies.logger", "scopeKind": "class"}, {"_type": "tag", "name": "dependencies", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^  const dependencies = {$/", "language": "JavaScript", "kind": "class"}, {"_type": "tag", "name": "enhanceLocationData", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^  const enhanceLocationData = async (location) => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "enhancedLocation", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^      const enhancedLocation = await enhanceLocationData(location);$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "error", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^      error: jest.fn(),$/", "language": "JavaScript", "kind": "property", "scope": "dependencies.logger", "scopeKind": "class"}, {"_type": "tag", "name": "errors", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^    const errors = [];$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "findOne", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^        findOne: jest.fn(),$/", "language": "JavaScript", "kind": "property", "scope": "dependencies.models.Country", "scopeKind": "class"}, {"_type": "tag", "name": "findOne", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^        findOne: jest.fn(),$/", "language": "JavaScript", "kind": "property", "scope": "dependencies.models.Region", "scopeKind": "class"}, {"_type": "tag", "name": "geoipService", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^    geoipService: {$/", "language": "JavaScript", "kind": "class", "scope": "dependencies", "scopeKind": "class"}, {"_type": "tag", "name": "getConfigByType", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^        getConfigByType: jest.fn(),$/", "language": "JavaScript", "kind": "property", "scope": "dependencies.models.RegionConfig", "scopeKind": "class"}, {"_type": "tag", "name": "getConfigsByRegion", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^        getConfigsByRegion: jest.fn(),$/", "language": "JavaScript", "kind": "property", "scope": "dependencies.models.RegionConfig", "scopeKind": "class"}, {"_type": "tag", "name": "getConfigurationsByLocation", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^  const getConfigurationsByLocation = async (location, configType = null) => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "getCountryConfigurations", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^  const getCountryConfigurations = async (countryCode, configType = null) => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "getLocationByIp", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^      getLocationByIp: jest.fn(),$/", "language": "JavaScript", "kind": "property", "scope": "dependencies.geoipService", "scopeKind": "class"}, {"_type": "tag", "name": "getLocationFromIp", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^  const getLocationFromIp = async (ip) => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "getRegionConfigurations", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^  const getRegionConfigurations = async (regionCode, configType = null) => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "info", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^      info: jest.fn(),$/", "language": "JavaScript", "kind": "property", "scope": "dependencies.logger", "scopeKind": "class"}, {"_type": "tag", "name": "isValidIpAddress", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^      isValidIpAddress: jest.fn(),$/", "language": "JavaScript", "kind": "property", "scope": "dependencies.utils", "scopeKind": "class"}, {"_type": "tag", "name": "location", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^      const location = await dependencies.geoipService.getLocationByIp(normalizedIp);$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "logger", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^    logger: {$/", "language": "JavaScript", "kind": "class", "scope": "dependencies", "scopeKind": "class"}, {"_type": "tag", "name": "logger", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^const logger = require('..\\/..\\/..\\/src\\/utils\\/logger');$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "models", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^    models: {$/", "language": "JavaScript", "kind": "class", "scope": "dependencies", "scopeKind": "class"}, {"_type": "tag", "name": "normalizeIpAddress", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^      normalizeIpAddress: jest.fn(),$/", "language": "JavaScript", "kind": "property", "scope": "dependencies.utils", "scopeKind": "class"}, {"_type": "tag", "name": "normalizedIp", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^      const normalizedIp = dependencies.utils.normalizeIpAddress(ip);$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "region", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^      const region = await dependencies.models.Region.findOne({ code: regionCode.toUpperCase() }/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "regionConfigs", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^      const regionConfigs = await getRegionConfigurations(country.region.code, configType);$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "result", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^      const result = configType && configs ? configs.configData : configs;$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "utils", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^    utils: {$/", "language": "JavaScript", "kind": "class", "scope": "dependencies", "scopeKind": "class"}, {"_type": "tag", "name": "validateLocationOverride", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^  const validateLocationOverride = (override) => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "warn", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "pattern": "/^      warn: jest.fn(),$/", "language": "JavaScript", "kind": "property", "scope": "dependencies.logger", "scopeKind": "class"}], "filename": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/mocks/geolocation.service.mock.js", "hash": "f0ca121a2ad7fbdb2fd5787e724f34ba", "format-version": 4, "code-base-name": "default", "fields": [{"name": "cacheService: {", "scope": "dependencies", "scopeKind": "class", "description": "unavailable"}, {"name": "let clearedCount = 0;", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "let configs;", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "module.exports = { createMockGeolocationService };/", "scope": "module.exports", "scopeKind": "class", "description": "unavailable"}, {"name": "debug: jest.fn(),", "scope": "dependencies.logger", "scopeKind": "class", "description": "unavailable"}, {"name": "error: jest.fn(),", "scope": "dependencies.logger", "scopeKind": "class", "description": "unavailable"}, {"name": "findOne: jest.fn(),", "scope": "dependencies.models.Country", "scopeKind": "class", "description": "unavailable"}, {"name": "getConfigByType: jest.fn(),", "scope": "dependencies.models.RegionConfig", "scopeKind": "class", "description": "unavailable"}, {"name": "getConfigsByRegion: jest.fn(),", "scope": "dependencies.models.RegionConfig", "scopeKind": "class", "description": "unavailable"}, {"name": "getLocationByIp: jest.fn(),", "scope": "dependencies.geoipService", "scopeKind": "class", "description": "unavailable"}, {"name": "info: jest.fn(),", "scope": "dependencies.logger", "scopeKind": "class", "description": "unavailable"}, {"name": "isValidIpAddress: jest.fn(),", "scope": "dependencies.utils", "scopeKind": "class", "description": "unavailable"}, {"name": "normalizeIpAddress: jest.fn(),", "scope": "dependencies.utils", "scopeKind": "class", "description": "unavailable"}, {"name": "warn: jest.fn(),", "scope": "dependencies.logger", "scopeKind": "class", "description": "unavailable"}], "revision_history": [{"175": ""}]}