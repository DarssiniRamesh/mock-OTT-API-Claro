{"is_source_file": true, "format": "JavaScript", "description": "A cache service that provides an in-memory caching mechanism with time-to-live (TTL), least recently used (LRU) eviction, and memory monitoring features.", "external_files": ["../utils/logger"], "external_methods": [], "published": ["cacheService"], "classes": [{"name": "Node", "description": "Represents an entry in the LRU linked list for the cache.", "properties": [{"name": "key", "description": "The key of the cached entry."}, {"name": "value", "description": "The value of the cached entry."}, {"name": "ttl", "description": "The time-to-live of the cached entry."}, {"name": "expiry", "description": "The expiry time of the cached entry."}, {"name": "next", "description": "Reference to the next node in the LRU linked list."}, {"name": "prev", "description": "Reference to the previous node in the LRU linked list."}, {"name": "size", "description": "The calculated size of the cached value."}]}, {"name": "CacheService", "description": "Provides in-memory caching with TTL and LRU eviction.", "properties": [{"name": "maxSize", "description": "Maximum size of the cache in bytes."}, {"name": "defaultTTL", "description": "Default time-to-live for cache entries."}, {"name": "pruneInterval", "description": "Interval for pruning expired entries."}, {"name": "cache", "description": "Map for storing cached entries."}, {"name": "currentSize", "description": "Current size of the cache in bytes."}, {"name": "head", "description": "Reference to the most recently used node."}, {"name": "tail", "description": "Reference to the least recently used node."}, {"name": "stats", "description": "Statistics about cache operations."}, {"name": "evictionCallback", "description": "Callback function for eviction operations."}]}], "methods": [{"name": "set", "description": "Sets a value in the cache with an optional TTL."}, {"name": "get", "description": "Retrieves a value from the cache by key."}, {"name": "has", "description": "Checks if a key exists in the cache and is not expired."}, {"name": "delete", "description": "Deletes a value from the cache by key."}, {"name": "clear", "description": "Clears the entire cache."}, {"name": "getStats", "description": "Returns cache statistics."}, {"name": "setMany", "description": "Sets multiple values in the cache."}, {"name": "getMany", "description": "Retrieves multiple values from the cache."}, {"name": "deleteMany", "description": "Deletes multiple values from the cache."}, {"name": "keys", "description": "Returns all keys in the cache."}, {"name": "values", "description": "Returns all values in the cache."}, {"name": "entries", "description": "Returns all entries in the cache."}, {"name": "prune", "description": "Removes expired entries from the cache."}, {"name": "setMaxSize", "description": "Sets the maximum size of the cache."}, {"name": "setDefaultTTL", "description": "Sets the default time-to-live for cache entries."}, {"name": "onEviction", "description": "Sets a callback to be called when an entry is evicted."}, {"name": "deletePattern", "description": "Deletes entries that match a specified pattern."}, {"name": "destroy", "description": "Cleans up resources and stops pruning."}, {"name": "_addToFront(node)", "scope": "CacheService", "scopeKind": "class", "description": "unavailable"}, {"name": "_calculateSize(value)", "scope": "Node", "scopeKind": "class", "description": "unavailable"}, {"name": "_evictEntries()", "scope": "CacheService", "scopeKind": "class", "description": "unavailable"}, {"name": "_moveToFront(node)", "scope": "CacheService", "scopeKind": "class", "description": "unavailable"}, {"name": "_removeNode(node)", "scope": "CacheService", "scopeKind": "class", "description": "unavailable"}, {"name": "_startPruneInterval()", "scope": "CacheService", "scopeKind": "class", "description": "unavailable"}, {"name": "_stopPruneInterval()", "scope": "CacheService", "scopeKind": "class", "description": "unavailable"}, {"name": "constructor(key, value, ttl = 0)", "scope": "Node", "scopeKind": "class", "description": "unavailable"}, {"name": "constructor(options = {})", "scope": "CacheService", "scopeKind": "class", "description": "unavailable"}, {"name": "isExpired()", "scope": "Node", "scopeKind": "class", "description": "unavailable"}], "calls": ["../utils/logger.info", "../utils/logger.debug", "../utils/logger.error"], "search-terms": ["CacheService", "Node", "in-memory caching", "LRU eviction", "TTL"], "state": 2, "file_id": 23, "knowledge_revision": 51, "git_revision": "22ca3b8cbad66d429350d0359fd098789bb9e9d1", "ctags": [{"_type": "tag", "name": "CacheService", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^class CacheService {$/", "language": "JavaScript", "kind": "class"}, {"_type": "tag", "name": "Node", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^class Node {$/", "language": "JavaScript", "kind": "class"}, {"_type": "tag", "name": "_addToFront", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^  _addToFront(node) {$/", "language": "JavaScript", "kind": "method", "signature": "(node)", "scope": "CacheService", "scopeKind": "class"}, {"_type": "tag", "name": "_calculateSize", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^  _calculateSize(value) {$/", "language": "JavaScript", "kind": "method", "signature": "(value)", "scope": "Node", "scopeKind": "class"}, {"_type": "tag", "name": "_evictEntries", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^  _evictEntries() {$/", "language": "JavaScript", "kind": "method", "signature": "()", "scope": "CacheService", "scopeKind": "class"}, {"_type": "tag", "name": "_moveToFront", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^  _moveToFront(node) {$/", "language": "JavaScript", "kind": "method", "signature": "(node)", "scope": "CacheService", "scopeKind": "class"}, {"_type": "tag", "name": "_removeNode", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^  _removeNode(node) {$/", "language": "JavaScript", "kind": "method", "signature": "(node)", "scope": "CacheService", "scopeKind": "class"}, {"_type": "tag", "name": "_startPruneInterval", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^  _startPruneInterval() {$/", "language": "JavaScript", "kind": "method", "signature": "()", "scope": "CacheService", "scopeKind": "class"}, {"_type": "tag", "name": "_stopPruneInterval", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^  _stopPruneInterval() {$/", "language": "JavaScript", "kind": "method", "signature": "()", "scope": "CacheService", "scopeKind": "class"}, {"_type": "tag", "name": "cacheService", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^const cacheService = new CacheService();$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "constructor", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^  constructor(key, value, ttl = 0) {$/", "language": "JavaScript", "kind": "method", "signature": "(key, value, ttl = 0)", "scope": "Node", "scopeKind": "class"}, {"_type": "tag", "name": "constructor", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^  constructor(options = {}) {$/", "language": "JavaScript", "kind": "method", "signature": "(options = {})", "scope": "CacheService", "scopeKind": "class"}, {"_type": "tag", "name": "deletedCount", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^    let deletedCount = 0;$/", "language": "JavaScript", "kind": "variable"}, {"_type": "tag", "name": "deletes", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^      deletes: 0,$/", "language": "JavaScript", "kind": "property", "scope": "CacheService.constructor.stats", "scopeKind": "class"}, {"_type": "tag", "name": "entries", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^    const entries = [];$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "evictions", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^      evictions: 0,$/", "language": "JavaScript", "kind": "property", "scope": "CacheService.constructor.stats", "scopeKind": "class"}, {"_type": "tag", "name": "expirations", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^      expirations: 0,$/", "language": "JavaScript", "kind": "property", "scope": "CacheService.constructor.stats", "scopeKind": "class"}, {"_type": "tag", "name": "hits", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^      hits: 0,$/", "language": "JavaScript", "kind": "property", "scope": "CacheService.constructor.stats", "scopeKind": "class"}, {"_type": "tag", "name": "isExpired", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^  isExpired() {$/", "language": "JavaScript", "kind": "method", "signature": "()", "scope": "Node", "scopeKind": "class"}, {"_type": "tag", "name": "key", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^  get(key) {$/", "language": "JavaScript", "kind": "field", "scope": "CacheService", "scopeKind": "class"}, {"_type": "tag", "name": "key", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^  set(key, value, ttl = this.defaultTTL) {$/", "language": "JavaScript", "kind": "field", "scope": "CacheService", "scopeKind": "class"}, {"_type": "tag", "name": "logger", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^const logger = require('..\\/utils\\/logger');$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "misses", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^      misses: 0,$/", "language": "JavaScript", "kind": "property", "scope": "CacheService.constructor.stats", "scopeKind": "class"}, {"_type": "tag", "name": "misses", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^      this.stats.misses++;$/", "language": "JavaScript", "kind": "field", "scope": "CacheService", "scopeKind": "class"}, {"_type": "tag", "name": "node", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^      const node = new Node(key, value, ttl);$/", "language": "JavaScript", "kind": "constant", "scope": "CacheService", "scopeKind": "class"}, {"_type": "tag", "name": "node", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^    const node = this.cache.get(key);$/", "language": "JavaScript", "kind": "field", "scope": "CacheService", "scopeKind": "class"}, {"_type": "tag", "name": "node", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^    if (!node) {$/", "language": "JavaScript", "kind": "field", "scope": "CacheService", "scopeKind": "class"}, {"_type": "tag", "name": "now", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^    const now = Date.now();$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "prunedCount", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^    let prunedCount = 0;$/", "language": "JavaScript", "kind": "variable"}, {"_type": "tag", "name": "regex", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^    const regex = pattern instanceof RegExp ? pattern : new RegExp(pattern);$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "result", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^    const result = {};$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "sets", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^      sets: 0,$/", "language": "JavaScript", "kind": "property", "scope": "CacheService.constructor.stats", "scopeKind": "class"}, {"_type": "tag", "name": "stats", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^      this.stats.misses++;$/", "language": "JavaScript", "kind": "field", "scope": "CacheService", "scopeKind": "class"}, {"_type": "tag", "name": "stats", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^    this.stats = {$/", "language": "JavaScript", "kind": "class", "scope": "CacheService.constructor", "scopeKind": "class"}, {"_type": "tag", "name": "ttl", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^  set(key, value, ttl = this.defaultTTL) {$/", "language": "JavaScript", "kind": "field", "scope": "CacheService", "scopeKind": "class"}, {"_type": "tag", "name": "undefined", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^      return undefined;$/", "language": "JavaScript", "kind": "field", "scope": "CacheService", "scopeKind": "class"}, {"_type": "tag", "name": "value", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^  set(key, value, ttl = this.defaultTTL) {$/", "language": "JavaScript", "kind": "field", "scope": "CacheService", "scopeKind": "class"}, {"_type": "tag", "name": "values", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "pattern": "/^    const values = [];$/", "language": "JavaScript", "kind": "constant"}], "filename": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/cache.service.js", "hash": "ee4d9af7551994627a387b791a4e269c", "format-version": 4, "code-base-name": "default", "fields": [{"name": "let deletedCount = 0;", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "deletes: 0,", "scope": "CacheService.constructor.stats", "scopeKind": "class", "description": "unavailable"}, {"name": "evictions: 0,", "scope": "CacheService.constructor.stats", "scopeKind": "class", "description": "unavailable"}, {"name": "expirations: 0,", "scope": "CacheService.constructor.stats", "scopeKind": "class", "description": "unavailable"}, {"name": "hits: 0,", "scope": "CacheService.constructor.stats", "scopeKind": "class", "description": "unavailable"}, {"name": "get(key) {", "scope": "CacheService", "scopeKind": "class", "description": "unavailable"}, {"name": "set(key, value, ttl = this.defaultTTL) {", "scope": "CacheService", "scopeKind": "class", "description": "unavailable"}, {"name": "misses: 0,", "scope": "CacheService.constructor.stats", "scopeKind": "class", "description": "unavailable"}, {"name": "this.stats.misses++;", "scope": "CacheService", "scopeKind": "class", "description": "unavailable"}, {"name": "const node = this.cache.get(key);", "scope": "CacheService", "scopeKind": "class", "description": "unavailable"}, {"name": "if (!node) {", "scope": "CacheService", "scopeKind": "class", "description": "unavailable"}, {"name": "let prunedCount = 0;", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "sets: 0,", "scope": "CacheService.constructor.stats", "scopeKind": "class", "description": "unavailable"}, {"name": "return undefined;", "scope": "CacheService", "scopeKind": "class", "description": "unavailable"}], "revision_history": [{"51": "22ca3b8cbad66d429350d0359fd098789bb9e9d1"}]}