{"is_source_file": true, "format": "JavaScript", "description": "This file defines a set of custom error classes extending the base Error class for use in an API. Each class provides specific error handling for various scenarios such as validation, authentication, authorization, and service availability.", "external_files": [], "external_methods": [], "published": ["BaseError", "ValidationError", "AuthenticationError", "AuthorizationError", "NotFoundError", "ConflictError", "RateLimitError", "ServiceUnavailableError", "DatabaseError", "ExternalServiceError"], "classes": [{"name": "BaseError", "description": "Base error class extending the built-in Error class, providing a foundation for all custom error types."}, {"name": "ValidationError", "description": "Error class for validation failures, extending BaseError."}, {"name": "AuthenticationError", "description": "Error class for authentication failures, extending BaseError."}, {"name": "AuthorizationError", "description": "Error class for authorization failures, extending BaseError."}, {"name": "NotFoundError", "description": "Error class for resource not found scenarios, extending BaseError."}, {"name": "ConflictError", "description": "Error class for resource conflict scenarios, extending BaseError."}, {"name": "RateLimitError", "description": "Error class for rate limiting scenarios, extending BaseError."}, {"name": "ServiceUnavailableError", "description": "Error class for service unavailability, extending BaseError."}, {"name": "DatabaseError", "description": "Error class for database failures, extending BaseError."}, {"name": "ExternalServiceError", "description": "Error class for failures related to external services, extending BaseError."}], "methods": [{"name": "constructor(message = 'Authentication Error', errorCode = 'AUTHENTICATION_ERROR')", "scope": "AuthenticationError", "scopeKind": "class", "description": "unavailable"}, {"name": "constructor(message = 'Authorization Error', errorCode = 'AUTHORIZATION_ERROR')", "scope": "AuthorizationError", "scopeKind": "class", "description": "unavailable"}, {"name": "constructor(message = 'Database Error', errorCode = 'DATABASE_ERROR')", "scope": "DatabaseError", "scopeKind": "class", "description": "unavailable"}, {"name": "constructor(message = 'External Service Error', errorCode = 'EXTERNAL_SERVICE_ERROR', serviceDetails = {})", "scope": "ExternalServiceError", "scopeKind": "class", "description": "unavailable"}, {"name": "constructor(message = 'Resource Conflict', errorCode = 'CONFLICT_ERROR')", "scope": "ConflictError", "scopeKind": "class", "description": "unavailable"}, {"name": "constructor(message = 'Resource Not Found', errorCode = 'NOT_FOUND_ERROR')", "scope": "NotFoundError", "scopeKind": "class", "description": "unavailable"}, {"name": "constructor(message = 'Service Unavailable', errorCode = 'SERVICE_UNAVAILABLE')", "scope": "ServiceUnavailableError", "scopeKind": "class", "description": "unavailable"}, {"name": "constructor(message = 'Too Many Requests', errorCode = 'RATE_LIMIT_ERROR')", "scope": "RateLimitError", "scopeKind": "class", "description": "unavailable"}, {"name": "constructor(message = 'Validation Error', errors = {}, errorCode = 'VALIDATION_ERROR')", "scope": "ValidationError", "scopeKind": "class", "description": "unavailable"}, {"name": "constructor(message, statusCode = 500, errorCode = 'INTERNAL_ERROR', isOperational = true)", "scope": "BaseError", "scopeKind": "class", "description": "unavailable"}], "calls": [], "search-terms": ["custom error classes", "API error handling", "BaseError", "ValidationError", "AuthenticationError", "AuthorizationError"], "state": 2, "file_id": 31, "knowledge_revision": 71, "git_revision": "02d617c5b706becf6329932da6df3d1e5e39ba93", "ctags": [{"_type": "tag", "name": "AuthenticationError", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/utils/errors.js", "pattern": "/^class AuthenticationError extends BaseError {$/", "language": "JavaScript", "kind": "class"}, {"_type": "tag", "name": "AuthorizationError", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/utils/errors.js", "pattern": "/^class AuthorizationError extends BaseError {$/", "language": "JavaScript", "kind": "class"}, {"_type": "tag", "name": "BaseError", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/utils/errors.js", "pattern": "/^  BaseError,$/", "language": "JavaScript", "kind": "field", "scope": "module.exports", "scopeKind": "class"}, {"_type": "tag", "name": "BaseError", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/utils/errors.js", "pattern": "/^class BaseError extends Error {$/", "language": "JavaScript", "kind": "class"}, {"_type": "tag", "name": "ConflictError", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/utils/errors.js", "pattern": "/^class ConflictError extends BaseError {$/", "language": "JavaScript", "kind": "class"}, {"_type": "tag", "name": "DatabaseError", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/utils/errors.js", "pattern": "/^class DatabaseError extends BaseError {$/", "language": "JavaScript", "kind": "class"}, {"_type": "tag", "name": "ExternalServiceError", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/utils/errors.js", "pattern": "/^class ExternalServiceError extends BaseError {$/", "language": "JavaScript", "kind": "class"}, {"_type": "tag", "name": "NotFoundError", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/utils/errors.js", "pattern": "/^class NotFoundError extends BaseError {$/", "language": "JavaScript", "kind": "class"}, {"_type": "tag", "name": "RateLimitError", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/utils/errors.js", "pattern": "/^class RateLimitError extends BaseError {$/", "language": "JavaScript", "kind": "class"}, {"_type": "tag", "name": "ServiceUnavailableError", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/utils/errors.js", "pattern": "/^class ServiceUnavailableError extends BaseError {$/", "language": "JavaScript", "kind": "class"}, {"_type": "tag", "name": "ValidationError", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/utils/errors.js", "pattern": "/^class ValidationError extends BaseError {$/", "language": "JavaScript", "kind": "class"}, {"_type": "tag", "name": "constructor", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/utils/errors.js", "pattern": "/^  constructor(message = 'Authentication Error', errorCode = 'AUTHENTICATION_ERROR') {$/", "language": "JavaScript", "kind": "method", "signature": "(message = 'Authentication Error', errorCode = 'AUTHENTICATION_ERROR')", "scope": "AuthenticationError", "scopeKind": "class"}, {"_type": "tag", "name": "constructor", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/utils/errors.js", "pattern": "/^  constructor(message = 'Authorization Error', errorCode = 'AUTHORIZATION_ERROR') {$/", "language": "JavaScript", "kind": "method", "signature": "(message = 'Authorization Error', errorCode = 'AUTHORIZATION_ERROR')", "scope": "AuthorizationError", "scopeKind": "class"}, {"_type": "tag", "name": "constructor", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/utils/errors.js", "pattern": "/^  constructor(message = 'Database Error', errorCode = 'DATABASE_ERROR') {$/", "language": "JavaScript", "kind": "method", "signature": "(message = 'Database Error', errorCode = 'DATABASE_ERROR')", "scope": "DatabaseError", "scopeKind": "class"}, {"_type": "tag", "name": "constructor", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/utils/errors.js", "pattern": "/^  constructor(message = 'External Service Error', errorCode = 'EXTERNAL_SERVICE_ERROR', serviceD/", "language": "JavaScript", "kind": "method", "signature": "(message = 'External Service Error', errorCode = 'EXTERNAL_SERVICE_ERROR', serviceDetails = {})", "scope": "ExternalServiceError", "scopeKind": "class"}, {"_type": "tag", "name": "constructor", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/utils/errors.js", "pattern": "/^  constructor(message = 'Resource Conflict', errorCode = 'CONFLICT_ERROR') {$/", "language": "JavaScript", "kind": "method", "signature": "(message = 'Resource Conflict', errorCode = 'CONFLICT_ERROR')", "scope": "ConflictError", "scopeKind": "class"}, {"_type": "tag", "name": "constructor", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/utils/errors.js", "pattern": "/^  constructor(message = 'Resource Not Found', errorCode = 'NOT_FOUND_ERROR') {$/", "language": "JavaScript", "kind": "method", "signature": "(message = 'Resource Not Found', errorCode = 'NOT_FOUND_ERROR')", "scope": "NotFoundError", "scopeKind": "class"}, {"_type": "tag", "name": "constructor", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/utils/errors.js", "pattern": "/^  constructor(message = 'Service Unavailable', errorCode = 'SERVICE_UNAVAILABLE') {$/", "language": "JavaScript", "kind": "method", "signature": "(message = 'Service Unavailable', errorCode = 'SERVICE_UNAVAILABLE')", "scope": "ServiceUnavailableError", "scopeKind": "class"}, {"_type": "tag", "name": "constructor", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/utils/errors.js", "pattern": "/^  constructor(message = 'Too Many Requests', errorCode = 'RATE_LIMIT_ERROR') {$/", "language": "JavaScript", "kind": "method", "signature": "(message = 'Too Many Requests', errorCode = 'RATE_LIMIT_ERROR')", "scope": "RateLimitError", "scopeKind": "class"}, {"_type": "tag", "name": "constructor", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/utils/errors.js", "pattern": "/^  constructor(message = 'Validation Error', errors = {}, errorCode = 'VALIDATION_ERROR') {$/", "language": "JavaScript", "kind": "method", "signature": "(message = 'Validation Error', errors = {}, errorCode = 'VALIDATION_ERROR')", "scope": "ValidationError", "scopeKind": "class"}, {"_type": "tag", "name": "constructor", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/utils/errors.js", "pattern": "/^  constructor(message, statusCode = 500, errorCode = 'INTERNAL_ERROR', isOperational = true) {$/", "language": "JavaScript", "kind": "method", "signature": "(message, statusCode = 500, errorCode = 'INTERNAL_ERROR', isOperational = true)", "scope": "BaseError", "scopeKind": "class"}], "filename": "/home/kavia/workspace/mock-OTT-API-Claro/src/utils/errors.js", "hash": "771a87a8916c6aa3e430d69c3cb20a75", "format-version": 4, "code-base-name": "default", "fields": [{"name": "BaseError,", "scope": "module.exports", "scopeKind": "class", "description": "unavailable"}], "revision_history": [{"71": "02d617c5b706becf6329932da6df3d1e5e39ba93"}]}