{"is_source_file": true, "format": "JavaScript", "description": "Unit tests for Geolocation Service, including location detection, configuration retrieval, and cache management functionality.", "external_files": ["../../../src/services/geoip.service", "../../../src/services/cache.service", "../../../src/utils/geoip.utils", "../../../src/utils/logger", "../../../src/models/Region", "../../../src/models/Country", "../../../src/models/RegionConfig"], "external_methods": ["jest.mock", "jest.clearAllMocks", "geoipService.getLocationFromIp", "cacheService.get", "cacheService.set", "Country.findOne", "Region.findOne", "RegionConfig.getConfigsByRegion", "RegionConfig.getConfigByType", "logger.warn", "logger.info", "logger.error", "logger.debug"], "published": [], "classes": [], "methods": [{"name": "getLocationFromIp", "description": "Retrieves location data from an IP address, checking cache first before querying GeoIP service."}, {"name": "getRegionConfigurations", "description": "Fetches region configuration based on region code, utilizing cache where applicable."}, {"name": "getCountryConfigurations", "description": "Fetches country configuration based on country code, checking cache first."}, {"name": "getConfigurationsByLocation", "description": "Retrieves configurations based on the location data provided."}, {"name": "validateLocationOverride", "description": "Validates the structure of a location override object provided."}, {"name": "clearCache", "description": "Clears cached entries based on the type specified."}, {"name": "AnonymousFunctiond271e7570100(field)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "AnonymousFunctiond271e7570200()", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["geolocationService.getLocationFromIp", "geolocationService.getRegionConfigurations", "geoipService.getLocationByIp", "cacheService.get", "cacheService.set", "Country.findOne", "Region.findOne", "RegionConfig.getConfigsByRegion", "RegionConfig.getConfigByType", "logger.warn", "logger.info", "logger.error", "logger.debug"], "search-terms": ["Geolocation Service", "location detection", "cache management", "unit tests"], "state": 2, "file_id": 46, "knowledge_revision": 173, "git_revision": "53a343e6419fcd7c151d5982e70489755b1c4261", "revision_history": [{"152": ""}, {"153": ""}, {"154": ""}, {"155": ""}, {"156": ""}, {"157": ""}, {"158": ""}, {"159": ""}, {"160": "53a343e6419fcd7c151d5982e70489755b1c4261"}, {"161": "53a343e6419fcd7c151d5982e70489755b1c4261"}, {"162": "53a343e6419fcd7c151d5982e70489755b1c4261"}, {"163": "53a343e6419fcd7c151d5982e70489755b1c4261"}, {"164": "53a343e6419fcd7c151d5982e70489755b1c4261"}, {"165": "53a343e6419fcd7c151d5982e70489755b1c4261"}, {"166": "53a343e6419fcd7c151d5982e70489755b1c4261"}, {"167": "53a343e6419fcd7c151d5982e70489755b1c4261"}, {"168": "53a343e6419fcd7c151d5982e70489755b1c4261"}, {"169": "53a343e6419fcd7c151d5982e70489755b1c4261"}, {"170": "53a343e6419fcd7c151d5982e70489755b1c4261"}, {"171": "53a343e6419fcd7c151d5982e70489755b1c4261"}, {"172": "53a343e6419fcd7c151d5982e70489755b1c4261"}, {"173": "53a343e6419fcd7c151d5982e70489755b1c4261"}], "ctags": [{"_type": "tag", "name": "AnonymousFunctiond271e7570100", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/services/geolocation.service.test.js", "pattern": "/^    populate: jest.fn().mockImplementation(function(field) {$/", "language": "JavaScript", "kind": "function", "signature": "(field)"}, {"_type": "tag", "name": "AnonymousFunctiond271e7570200", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/services/geolocation.service.test.js", "pattern": "/^        populate: jest.fn().mockImplementation(function() {$/", "language": "JavaScript", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "Country", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/services/geolocation.service.test.js", "pattern": "/^const Country = require('..\\/..\\/..\\/src\\/models\\/Country');$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "Region", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/services/geolocation.service.test.js", "pattern": "/^const Region = require('..\\/..\\/..\\/src\\/models\\/Region');$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "RegionConfig", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/services/geolocation.service.test.js", "pattern": "/^const RegionConfig = require('..\\/..\\/..\\/src\\/models\\/RegionConfig');$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "cacheService", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/services/geolocation.service.test.js", "pattern": "/^const cacheService = require('..\\/..\\/..\\/src\\/services\\/cache.service');$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "geoipService", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/services/geolocation.service.test.js", "pattern": "/^const geoipService = require('..\\/..\\/..\\/src\\/services\\/geoip.service');$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "geolocationService", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/services/geolocation.service.test.js", "pattern": "/^const geolocationService = require('..\\/..\\/..\\/src\\/services\\/geolocation.service');$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "logger", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/services/geolocation.service.test.js", "pattern": "/^const logger = require('..\\/..\\/..\\/src\\/utils\\/logger');$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "mongoose", "path": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/services/geolocation.service.test.js", "pattern": "/^const mongoose = require('mongoose');$/", "language": "JavaScript", "kind": "constant"}], "filename": "/home/kavia/workspace/mock-OTT-API-Claro/tests/unit/services/geolocation.service.test.js", "hash": "4044532ab68eefccce150c0e70f78dcf", "format-version": 4, "code-base-name": "default"}