{"is_source_file": true, "format": "JavaScript", "description": "This file defines a Geolocation Service that provides methods for detecting geolocation based on IP addresses, managing geolocation configurations for regions and countries, and handling caching of location data.", "external_files": ["./geoip.service", "./cache.service", "../models/Region", "../models/Country", "../models/RegionConfig", "../utils/geoip.utils", "../utils/logger"], "external_methods": ["geoipService.getLocationByIp", "Country.findOne", "Region.findOne", "RegionConfig.getConfigByType", "RegionConfig.getConfigsByRegion", "cacheService.get", "cacheService.set", "cacheService.deletePattern"], "published": ["getLocationFromIp", "getRegionConfigurations", "getCountryConfigurations", "getConfigurationsByLocation", "validateLocationOverride", "clearCache"], "classes": [], "methods": [{"name": "getLocationFromIp", "description": "Retrieves location information based on an IP address, checking cache first and enhancing the data with additional information from a database."}, {"name": "enhanceLocationData", "description": "Enhances the basic location data obtained from a GeoIP service with additional country and region information from the database."}, {"name": "getRegionConfigurations", "description": "Fetches region-specific configurations based on the provided region code and optional configuration type."}, {"name": "getCountryConfigurations", "description": "Retrieves country-specific configurations using the given country code and optional configuration type."}, {"name": "getConfigurationsByLocation", "description": "Gets configurations based on the provided location object, attempting to retrieve country-specific configurations first, then falls back to region-specific ones."}, {"name": "validateLocationOverride", "description": "Validates a location override object and returns a result with a validation flag and any errors found."}, {"name": "clearCache", "description": "Clears geolocation caches based on the specified type, returning the number of cache entries cleared."}], "calls": ["cacheService.get", "cacheService.set", "geoipService.getLocationByIp", "Country.findOne", "Region.findOne", "RegionConfig.getConfigByType", "RegionConfig.getConfigsByRegion", "logger.warn", "logger.debug", "logger.error", "cacheService.deletePattern"], "search-terms": ["Geolocation Service", "location detection", "region configurations", "country configurations"], "state": 2, "file_id": 26, "knowledge_revision": 57, "git_revision": "", "ctags": [{"_type": "tag", "name": "CONFIG_CACHE_TTL", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^const CONFIG_CACHE_TTL = 1800000; \\/\\/ 30 minutes$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "COUNTRY_CONFIG_CACHE_PREFIX", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^const COUNTRY_CONFIG_CACHE_PREFIX = 'geolocation:config:country:';$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "Country", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^const Country = require('..\\/models\\/Country');$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "LOCATION_CACHE_PREFIX", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^const LOCATION_CACHE_PREFIX = 'geolocation:location:';$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "LOCATION_CACHE_TTL", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^const LOCATION_CACHE_TTL = 3600000; \\/\\/ 1 hour$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "REGION_CONFIG_CACHE_PREFIX", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^const REGION_CONFIG_CACHE_PREFIX = 'geolocation:config:region:';$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "Region", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^const Region = require('..\\/models\\/Region');$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "RegionConfig", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^const RegionConfig = require('..\\/models\\/RegionConfig');$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "cacheKey", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^    const cacheKey = `${LOCATION_CACHE_PREFIX}${normalizedIp}`;$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "cacheKey", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^    const cacheKey = configType$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "cacheService", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^const cacheService = require('.\\/cache.service');$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "cachedConfig", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^    const cachedConfig = cacheService.get(cacheKey);$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "cachedLocation", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^    const cachedLocation = cacheService.get(cacheKey);$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "clearCache", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^const clearCache = (type = 'all') => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "clearedCount", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^  let clearedCount = 0;$/", "language": "JavaScript", "kind": "variable"}, {"_type": "tag", "name": "configs", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^    let configs;$/", "language": "JavaScript", "kind": "variable"}, {"_type": "tag", "name": "country", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^    const country = await Country.findOne({ code: countryCode });$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "country", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^    const country = await Country.findOne({ code: countryCode.toUpperCase() })$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "countryCode", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^    const countryCode = location.country.code;$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "countryConfigs", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^      const countryConfigs = await getCountryConfigurations(location.country.code, configType);$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "enhanceLocationData", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^const enhanceLocationData = async (location) => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "enhancedLocation", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^    const enhancedLocation = await enhanceLocationData(location);$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "errors", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^  const errors = [];$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "geoipService", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^const geoipService = require('.\\/geoip.service');$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "getConfigurationsByLocation", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^const getConfigurationsByLocation = async (location, configType = null) => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "getCountryConfigurations", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^const getCountryConfigurations = async (countryCode, configType = null) => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "getLocationFromIp", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^  getLocationFromIp,$/", "language": "JavaScript", "kind": "field", "scope": "module.exports", "scopeKind": "class"}, {"_type": "tag", "name": "getLocationFromIp", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^const getLocationFromIp = async (ip) => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "getRegionConfigurations", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^const getRegionConfigurations = async (regionCode, configType = null) => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "location", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^    const location = await geoipService.getLocationByIp(normalizedIp);$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "logger", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^const logger = require('..\\/utils\\/logger');$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "normalizedIp", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^    const normalizedIp = normalizeIpAddress(ip);$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "region", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^    const region = await Region.findOne({ code: regionCode.toUpperCase() });$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "regionConfigs", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^    const regionConfigs = await getRegionConfigurations(country.region.code, configType);$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "result", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^    const result = configType && configs ? configs.configData : configs;$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "validateLocationOverride", "path": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "pattern": "/^const validateLocationOverride = (override) => {$/", "language": "JavaScript", "kind": "constant"}], "filename": "/home/kavia/workspace/mock-OTT-API-Claro/src/services/geolocation.service.js", "hash": "cbe27cb7fbaa634b5378106fa64db68c", "format-version": 4, "code-base-name": "default", "fields": [{"name": "let clearedCount = 0;", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "let configs;", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "getLocationFromIp,", "scope": "module.exports", "scopeKind": "class", "description": "unavailable"}], "revision_history": [{"57": ""}]}